{"ast":null,"code":"import { Type } from '@angular/core';\nimport { isObservable } from 'rxjs';\nimport { STEP_STATE, THEME } from '../../../../ng-wizard/public-api';\nimport { StepOneComponent } from '../steps/step-1/step-one.component';\nimport { StepTwoComponent } from '../steps/step-2/step-two.component';\nimport { StepThreeComponent } from '../steps/step-3/step-three.component';\nimport { StepFourComponent } from '../steps/step-4/step-four.component';\nimport { StepFiveComponent } from '../steps/step-5/step-five.component';\nimport * as i0 from \"@angular/core\";\nexport let DemoWizardService = /*#__PURE__*/(() => {\n  class DemoWizardService {\n    constructor() {\n      this.config = {\n        selected: 0,\n        theme: THEME.arrows,\n        toolbarSettings: {\n          toolbarExtraButtons: [{\n            text: 'Finish',\n            class: 'btn btn-info',\n            event: () => alert('Finished!!!')\n          }]\n        }\n      };\n      this.stepDefinitions = [{\n        title: 'Step 1',\n        description: 'Step 1 description',\n        component: StepOneComponent,\n        canEnter: this.validateStep.bind(this, 'entry'),\n        canExit: this.validateStep.bind(this, 'exit')\n      }, {\n        title: 'Step 2',\n        description: 'Step 2 description',\n        state: STEP_STATE.disabled,\n        component: StepTwoComponent\n      }, {\n        title: 'Step 3',\n        description: 'Step 3 description',\n        component: StepThreeComponent,\n        canEnter: this.validateStep.bind(this, 'entry'),\n        canExit: this.validateStep.bind(this, 'exit')\n      }, {\n        title: 'Step 4',\n        description: 'Step 4 description',\n        component: StepFourComponent\n      }, {\n        title: 'Step 5',\n        description: 'Step 5 description',\n        state: STEP_STATE.hidden,\n        component: StepFiveComponent\n      }];\n    }\n    validateStep(type, args) {\n      let step = type == 'entry' ? args.toStep : args.fromStep;\n      let stepSpecificValidateMethod;\n      if (step && step.componentRef) {\n        stepSpecificValidateMethod = type == 'entry' ? step.componentRef.instance.validateEntryToStep : step.componentRef.instance.validateExitFromStep;\n      }\n      if (stepSpecificValidateMethod) {\n        if (typeof stepSpecificValidateMethod === typeof true) {\n          return stepSpecificValidateMethod;\n        } else if (stepSpecificValidateMethod instanceof Function) {\n          stepSpecificValidateMethod = stepSpecificValidateMethod.bind(step.componentRef.instance);\n          let result = stepSpecificValidateMethod();\n          if (isObservable(result)) {\n            return result;\n          } else if (typeof result === typeof true) {\n            return result;\n          }\n        }\n      }\n      return true;\n    }\n    static #_ = this.ɵfac = function DemoWizardService_Factory(t) {\n      return new (t || DemoWizardService)();\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: DemoWizardService,\n      factory: DemoWizardService.ɵfac\n    });\n  }\n  return DemoWizardService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}